#!/bin/bash
set -eu

. ./metric-store-ci/tasks/shared_bash

pushd oss-metric-store-release-master
  ACCEPTED_OSS_MS_SHA=$(git rev-parse HEAD)
popd

pushd p-metric-store-release-elect
  MS_RELEASE_ELECT_SHA=$(git rev-parse HEAD)
popd

pushd p-metric-store-release
  SHA_TO_BUMP_RELEASE_ELECT_TO=$(git rev-parse HEAD)
  BUMP_OSS_COMMIT_SHAS=$(git log --oneline --reverse --format=format:%H --grep='Bump OSS Metric Store' $MS_RELEASE_ELECT_SHA..HEAD)

  while read -r p_metric_store_bump_oss_sha; do
    echo
    echo " --- New p-metric-store SHA iteration ${p_metric_store_bump_oss_sha} ---"

    oss_sha=$(git show ${p_metric_store_bump_oss_sha} -- go.mod | grep 'github.com/cloudfoundry/metric-store-release' | grep -i '^+' | sed 's/.*-\([a-f0-9]*\)$/\1/g')
    echo "  FOUND corresponding oss ms release sha in go.mod: ${oss_sha}"

    pushd ../oss-metric-store-release-master
      set +e
      git rev-list ${ACCEPTED_OSS_MS_SHA} | grep -q -i "^${oss_sha}"
      this_oss_ms_sha_is_accepted=$?
      set -e
    popd

    if [ ${this_oss_ms_sha_is_accepted} -eq 0 ]; then
      echo "  FOUND oss ms release sha in oss master, thus it has been accepted"
    else
      echo "  NOT FOUND oss ms release sha in oss master, thus it has NOT been accepted"
      # the `^` allows us to get the commit just before this un-accepted sha
      #    thus including commits on p-metric-store-release-elect that are
      #    ready to go
      SHA_TO_BUMP_RELEASE_ELECT_TO="${p_metric_store_bump_oss_sha}^"
      break
    fi
  done <<< "$BUMP_OSS_COMMIT_SHAS"

popd

echo
echo " DONE: bumping p-metric-store-release-elect to ${SHA_TO_BUMP_RELEASE_ELECT_TO}"

cp -R p-metric-store-release-elect/. bumped-p-metric-store-release-elect

pushd bumped-p-metric-store-release-elect
  git remote add p-metric-store-release ../p-metric-store-release
  git fetch p-metric-store-release --recurse-submodules=no develop
  git merge ${SHA_TO_BUMP_RELEASE_ELECT_TO} --ff-only
popd
