#!/usr/bin/env bash

set -eoux pipefail

. ./metric-store-ci/tasks/shared_bash

git config --global user.email "${GITHUB_EMAIL}" && git config --global user.name "${GITHUB_NAME}"
set +x
if ! [[ -z "${GITHUB_PRIVATE_KEY}" ]]; then
  setup_github_ssh "${GITHUB_PRIVATE_KEY}"
fi
set -x

pushd golang-release-repo
  release_tag=$(git tag --points-at HEAD | sort | tail -n 1)
popd

pushd repo
  git checkout -b bump-golang-release-${release_tag}

  configure-blobstore

  bosh vendor-package "golang-${GOLANG_PACKAGE_VERSION}-linux" ../golang-release-repo
  git add packages/ .final_builds/packages/

  if [ $(git diff --staged | wc -l) -eq 0 ]; then
    echo "Nothing to commit!"
    exit 0
  fi

  git commit -m "Bump Golang Release ${release_tag}"

  git push origin bump-golang-release-${release_tag}

  touch sha
  tarball=`mktemp`
  bosh create-release --tarball=${tarball} --force
  go_version=$(tar xz packages/"golang-${GOLANG_PACKAGE_VERSION}-linux.tgz" -O 2>/dev/null < ${tarball} \
    | tar tz --wildcards './go*' 2>/dev/null \
    | grep -ohE "go[0-9]\.[0-9]{1,2}\.[0-9]{1,2}")

  pull_request_body="bump to use $go_version"
popd

cat << EOF > new_pull_request.json
  {
    "title": "Auto Bump Golang Release ${release_tag}",
    "base": "develop",
    "head": "bump-golang-release-${release_tag}",
    "body": "$(echo "${pull_request_body}")"
  }
EOF

cat new_pull_request.json

curl -X POST \
  -H "Authorization: token ${GITHUB_AUTH_TOKEN}" \
  -H "Content-Type: application/json" \
  --data-binary @new_pull_request.json \
  "https://api.github.com/repos/${GITHUB_REPO}/pulls" >github-pulls-response.json 2>github-pulls-error

ISSUE_URL=$(jq -r .issue_url github-pulls-response.json)

jq '.labels | map(.name) | . + ["auto-merge"] | {labels: .}' github-pulls-response.json >labels.json

curl -X PATCH \
   -H "Authorization: token ${GITHUB_AUTH_TOKEN}" \
   -H "Content-Type: application/json" \
   --data-binary @labels.json \
   "$ISSUE_URL"
