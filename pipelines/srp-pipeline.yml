resource_types:
  #### Secure Release Pipeline resource type
  - name: build-metadata
    type: registry-image
    source:
      repository: pcfopsmanager/build-metadata-resource

############## Resources ################
resources:
  #### Secure Release Pipeline resources
  - name: srp-helper-test
    type: registry-image
    source:
      repository: harbor.dhaka.cf-app.com/srp/srp-helper-task
      username: ((phoenix-osspi.srp-harbor-username))
      password: ((phoenix-osspi.srp-harbor-password))

  - name: build-metadata
    type: build-metadata

  - name: metric-store-ci
    type: git
    source:
      uri: git@github.com:cloudfoundry/metric-store-ci
      private_key: ((phoenix-osspi.svcboteos_github_private_key))
      branch: srp-scan

  - name: metric-store-develop
    type: git
    source:
      uri: git@github.com:cloudfoundry/metric-store-release
      branch: master
      private_key: ((phoenix-osspi.svcboteos_github_private_key))
      ignore_paths:
        - .final_builds
        - releases
      disable_ci_skip: false
      clean_tags: true

  - name: metric-store-version
    type: semver
    source:
      driver: gcs
      bucket: metric-store-ci-versions
      key: test/metric-store-release-acceptance-tile
      json_key: ((phoenix-osspi.gcp_service_account_key))
      initial_version: 0.2.0-build.24


############## Jobs ################
jobs:
  ##### Secure Release Pipeline jobs
  - name: "collect-srp-source-provenance-metric-store"
    serial: true
    plan:
      - in_parallel:
          - get: srp-helper-test
          - put: build-metadata
          - get: metric-store-version
          - get: metric-store-develop
          - get: metric-store-ci
      - task: "submit-metadata-for-metric-store"
        image: srp-helper-test
        config:
          platform: linux
          inputs:
            - name: metric-store-ci
            - name: metric-store-develop
            - name: build-metadata
            - name: metric-store-version
          params:
            SRP_CLIENT_ID: ((phoenix-osspi.srp-client-id))
            SRP_CLIENT_SECRET: ((phoenix-osspi.srp-client-secret))
            SRP_URL: https://srp.vmware.com
            SRP_KEY: ((phoenix-osspi.svcboteos_github_private_key))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                set -x
                set -euo pipefail
                mkdir ./provenance

                VERSION=$(cat metric-store-version/version)
                BUILD_NUMBER=$(cat build-metadata/build-name)
                BUILD_PIPELINE_NAME=$(cat build-metadata/build-pipeline-name)
                BUILD_JOB_NAME=$(cat build-metadata/build-job-name)
                BUILD_ID=$(cat build-metadata/build-id)
                OUTPUT_VERSION="1.0.0-${BUILD_ID}"
                BUILD_PROJECT=metric-store-release
                BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                ARTIFACTORY_AUTH_TOKEN=cmVmdGtuOjAxOjE3MjYyMjY1MDI6cWU2U1FlazVjNjVoNUllV2pWWU1BQ0NnaHJV

                export SRP_WORKING_DIR=/srp-work
                # download Observer agent
                export PATH=/srp-tools:/srp-tools/observer/bin:$PATH
                export SRPCLIVERSION="0.15.1-20231012115959-17ea2c6-242"
                curl -o /tmp/srp-tools-linux.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/srp-tools-generic-local/all/${SRPCLIVERSION}/srp-tools-linux-amd64-${SRPCLIVERSION}.tar.gz &&
                mkdir -p /srp-tools/observer
                cd /srp-tools
                tar zxf /tmp/srp-tools-linux.tar.gz
                observer_agent --version
                srp --version
                srp update -y
                srp --version

                # download golang tools
                curl -o /tmp/go-linux-amd64.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/golang-dist-cache/go1.19.5.linux-amd64.tar.gz
                tar zxf /tmp/go-linux-amd64.tar.gz
                export PATH=/srp-tools/go/bin:${PATH}
                go version

                export GITHUB_ACTION="metric-store-build-action"
                export GITHUB_FQDN="github.com"
                export GITHUB_REPOSITORY="cloudfoundry/metric-store-release"
                export GITHUB_REF="refs/heads/master"
                export FQDN="runway-ci-srp.eng.vmware.com"
                export NM="tobs-k8s-group"

                # Change to /tmp/build/fd2c3cf9/ directory
                cd -
                export JAVA_HOME=/build/toolchain/lin64/jdk-1.8.0_191

                alias observer_agent=./observer/bin/observer_agent.bash
                observer_agent --version

                export BUILD_NAMESPACE="tobs-k8s-group"
                export BUILD_PROJECT=${BUILD_PROJECT}
                export BUILD_ID=${BUILD_ID}
                export BRANCH_DIR=metric-store-develop
                export BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                export OUTPUT_VERSION="1.0.0-${BUILD_ID}"

                observer_agent -m start_observer --output_environment envs.sh --env_to_shell
                source ./envs.sh set

                export CGO_ENABLED=0
                export GOPRIVATE="gitlab.eng.vmware.com/*"
                export GOPROXY="https://build-artifactory.eng.vmware.com/artifactory/proxy-golang-remote"
                export GOSUMDB="https://build-artifactory.eng.vmware.com/artifactory/go-gosumdb-remote"
                export GOROOT=$(go env GOROOT)
                echo $GOROOT                
                mkdir -p ${SRP_WORKING_DIR}

                cd metric-store-develop/src
                echo "Running go build for linux/amd64"
                GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app-linux-amd64-metric-store cmd/metric-store/main.go

                echo "Extracting incorporated dependencies from the output using go version"
                go version -m app-linux-amd64-metric-store > ${SRP_WORKING_DIR}/go-app-deps.txt

                # capture env used in the build
                srp util env --saveto=${SRP_WORKING_DIR}/build-env.json

                if [ "${ARTIFACTORY_AUTH_TOKEN}" != "" ]; then
                  PUBLISH_URL="https://artifactory.eng.vmware.com/artifactory/srp-metric-store-release-go-local/${BUILD_PROJECT}/${OUTPUT_VERSION}/app-linux-amd64-metric-store"
                  echo "=====> Publishing build output to ${PUBLISH_URL}"
                  curl -H "X-JFrog-Art-Api:${ARTIFACTORY_AUTH_TOKEN}" -T app-linux-amd64-metric-store ${PUBLISH_URL}
                else
                  echo "ARTIFACTORY_AUTH_TOKEN is not set, skipping publish to artifactory"
                fi
                cd -

                echo "stopping observer and cleaning up"

                observer_agent -m stop_observer -f ${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                source ./envs.sh unset
                rm -f envs.sh

                srp config auth \
                  --client-id $SRP_CLIENT_ID \
                  --client-secret $SRP_CLIENT_SECRET \
                  --srp-endpoint $SRP_URL

                srp provenance init

                srp provenance add-build github --action ${GITHUB_ACTION} --build-id ${BUILD_ID} --instance ${GITHUB_FQDN} --namespace ${GITHUB_REPOSITORY} --ref ${GITHUB_REF}

                # the actual build was done in the _build_under_observer.sh script.  This set of commands records what commands
                # where issued to do the build and imports the observations from those commands

                echo "adding commands and importing observations recorded in build_under_observer.sh"
                srp provenance action start --name metric-store-build-action
                srp provenance action import-observation --name=build-obs --file=${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                srp provenance action import-cmd  --cmd './metric-store-ci/srp-scan/metric-store/build_under_observer.sh' --env-file=${SRP_WORKING_DIR}/build-env.json
                srp provenance action stop

                # add output and all inputs.
                srp provenance schematic --verbose --path ./metric-store-ci/srp-scan/metric-store/srp_schematic.yaml

                srp provenance compile --saveto ${SRP_WORKING_DIR}/prov3_fragment.json

                echo "Created ${SRP_WORKING_DIR}/prov3_fragment_${BUILD_ID}.json"

                cat ${SRP_WORKING_DIR}/prov3_fragment.json
                echo

                if [ "${SRP_CLIENT_ID}" != "" ] && [ "${SRP_CLIENT_SECRET}" != "" ]; then
                  srp provenance submit --verbose --path ${SRP_WORKING_DIR}/prov3_fragment.json
                else
                  echo "Skipping SRP submission.  Both SRP_CLIENT_ID and SRP_CLIENT_SECRET must be defined"
                fi

                srp metadata status \
                  --srp-endpoint $SRP_URL

  - name: "collect-srp-source-provenance-cf-auth-proxy"
    serial: true
    plan:
      - in_parallel:
          - get: srp-helper-test
          - put: build-metadata
          - get: metric-store-version
          - get: metric-store-develop
          - get: metric-store-ci
      - task: "submit-metadata-for-metric-store-cf-auth-proxy"
        image: srp-helper-test
        config:
          platform: linux
          inputs:
            - name: metric-store-ci
            - name: metric-store-develop
            - name: build-metadata
            - name: metric-store-version
          params:
            SRP_CLIENT_ID: ((phoenix-osspi.srp-client-id))
            SRP_CLIENT_SECRET: ((phoenix-osspi.srp-client-secret))
            SRP_URL: https://srp.vmware.com
            SRP_KEY: ((phoenix-osspi.svcboteos_github_private_key))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                set -x
                set -euo pipefail
                mkdir ./provenance

                VERSION=$(cat metric-store-version/version)
                BUILD_NUMBER=$(cat build-metadata/build-name)
                BUILD_PIPELINE_NAME=$(cat build-metadata/build-pipeline-name)
                BUILD_JOB_NAME=$(cat build-metadata/build-job-name)
                BUILD_ID=$(cat build-metadata/build-id)
                OUTPUT_VERSION="1.0.0-${BUILD_ID}"
                BUILD_PROJECT=metric-store-release
                BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                ARTIFACTORY_AUTH_TOKEN=cmVmdGtuOjAxOjE3MjYyMjY1MDI6cWU2U1FlazVjNjVoNUllV2pWWU1BQ0NnaHJV

                export SRP_WORKING_DIR=/srp-work
                # download Observer agent
                export PATH=/srp-tools:/srp-tools/observer/bin:$PATH
                export SRPCLIVERSION="0.15.1-20231012115959-17ea2c6-242"
                curl -o /tmp/srp-tools-linux.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/srp-tools-generic-local/all/${SRPCLIVERSION}/srp-tools-linux-amd64-${SRPCLIVERSION}.tar.gz &&
                mkdir -p /srp-tools/observer
                cd /srp-tools
                tar zxf /tmp/srp-tools-linux.tar.gz
                observer_agent --version
                srp --version
                srp update -y
                srp --version
                
                # download golang tools
                curl -o /tmp/go-linux-amd64.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/golang-dist-cache/go1.19.5.linux-amd64.tar.gz
                tar zxf /tmp/go-linux-amd64.tar.gz
                export PATH=/srp-tools/go/bin:${PATH}
                go version
                
                export GITHUB_ACTION="metric-store-build-action"
                export GITHUB_FQDN="github.com"
                export GITHUB_REPOSITORY="cloudfoundry/metric-store-release"
                export GITHUB_REF="refs/heads/master"
                export FQDN="runway-ci-srp.eng.vmware.com"
                export NM="tobs-k8s-group"

                # Change to /tmp/build/fd2c3cf9/ directory
                cd -
                export JAVA_HOME=/build/toolchain/lin64/jdk-1.8.0_191
                
                alias observer_agent=./observer/bin/observer_agent.bash
                observer_agent --version

                export BUILD_NAMESPACE="tobs-k8s-group"
                export BUILD_PROJECT=${BUILD_PROJECT}
                export BUILD_ID=${BUILD_ID}
                export BRANCH_DIR=metric-store-develop
                export BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                export OUTPUT_VERSION="1.0.0-${BUILD_ID}"
                
                observer_agent -m start_observer --output_environment envs.sh --env_to_shell
                source ./envs.sh set
                
                export CGO_ENABLED=0
                export GOPRIVATE="gitlab.eng.vmware.com/*"
                export GOPROXY="https://build-artifactory.eng.vmware.com/artifactory/proxy-golang-remote"
                export GOSUMDB="https://build-artifactory.eng.vmware.com/artifactory/go-gosumdb-remote"
                export GOROOT=$(go env GOROOT)
                echo $GOROOT                
                mkdir -p ${SRP_WORKING_DIR}

                cd metric-store-develop/src
                echo "Running go build for linux/amd64"
                GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app-linux-amd64-cf-auth-proxy cmd/cf-auth-proxy/main.go
  
                echo "Extracting incorporated dependencies from the output using go version"
                go version -m app-linux-amd64-cf-auth-proxy > ${SRP_WORKING_DIR}/go-app-deps.txt
                
                # capture env used in the build
                srp util env --saveto=${SRP_WORKING_DIR}/build-env.json
  
                if [ "${ARTIFACTORY_AUTH_TOKEN}" != "" ]; then
                  PUBLISH_URL="https://artifactory.eng.vmware.com/artifactory/srp-metric-store-release-go-local/${BUILD_PROJECT}/${OUTPUT_VERSION}/app-linux-amd64-cf-auth-proxy"
                  echo "=====> Publishing build output to ${PUBLISH_URL}"
                  curl -H "X-JFrog-Art-Api:${ARTIFACTORY_AUTH_TOKEN}" -T app-linux-amd64-cf-auth-proxy ${PUBLISH_URL}
                else
                  echo "ARTIFACTORY_AUTH_TOKEN is not set, skipping publish to artifactory"
                fi
                cd -
                
                echo "stopping observer and cleaning up"

                observer_agent -m stop_observer -f ${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                source ./envs.sh unset
                rm -f envs.sh
                
                srp config auth \
                  --client-id $SRP_CLIENT_ID \
                  --client-secret $SRP_CLIENT_SECRET \
                  --srp-endpoint $SRP_URL
                
                srp provenance init
                
                srp provenance add-build github --action ${GITHUB_ACTION} --build-id ${BUILD_ID} --instance ${GITHUB_FQDN} --namespace ${GITHUB_REPOSITORY} --ref ${GITHUB_REF}
  
                # the actual build was done in the _build_under_observer.sh script.  This set of commands records what commands
                # where issued to do the build and imports the observations from those commands
                
                echo "adding commands and importing observations recorded in build_under_observer.sh"
                srp provenance action start --name metric-store-build-action
                srp provenance action import-observation --name=build-obs --file=${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                srp provenance action import-cmd  --cmd './metric-store-ci/srp-scan/cf-auth-proxy/build_under_observer.sh' --env-file=${SRP_WORKING_DIR}/build-env.json
                srp provenance action stop
  
                # add output and all inputs.
                srp provenance schematic --verbose --path ./metric-store-ci/srp-scan/cf-auth-proxy/srp_schematic.yaml
  
                srp provenance compile --saveto ${SRP_WORKING_DIR}/prov3_fragment.json
  
                echo "Created ${SRP_WORKING_DIR}/prov3_fragment_${BUILD_ID}.json"
  
                cat ${SRP_WORKING_DIR}/prov3_fragment.json
                echo

                if [ "${SRP_CLIENT_ID}" != "" ] && [ "${SRP_CLIENT_SECRET}" != "" ]; then
                  srp provenance submit --verbose --path ${SRP_WORKING_DIR}/prov3_fragment.json
                else
                  echo "Skipping SRP submission.  Both SRP_CLIENT_ID and SRP_CLIENT_SECRET must be defined"
                fi
                
                srp metadata status \
                  --srp-endpoint $SRP_URL

  - name: "collect-srp-source-provenance-nozzle"
    serial: true
    plan:
      - in_parallel:
          - get: srp-helper-test
          - put: build-metadata
          - get: metric-store-version
          - get: metric-store-develop
          - get: metric-store-ci
      - task: "submit-metadata-for-metric-store-nozzle"
        image: srp-helper-test
        config:
          platform: linux
          inputs:
            - name: metric-store-ci
            - name: metric-store-develop
            - name: build-metadata
            - name: metric-store-version
          params:
            SRP_CLIENT_ID: ((phoenix-osspi.srp-client-id))
            SRP_CLIENT_SECRET: ((phoenix-osspi.srp-client-secret))
            SRP_URL: https://srp.vmware.com
            SRP_KEY: ((phoenix-osspi.svcboteos_github_private_key))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                set -x
                set -euo pipefail
                mkdir ./provenance
                
                VERSION=$(cat metric-store-version/version)
                BUILD_NUMBER=$(cat build-metadata/build-name)
                BUILD_PIPELINE_NAME=$(cat build-metadata/build-pipeline-name)
                BUILD_JOB_NAME=$(cat build-metadata/build-job-name)
                BUILD_ID=$(cat build-metadata/build-id)
                OUTPUT_VERSION="1.0.0-${BUILD_ID}"
                BUILD_PROJECT=metric-store-release
                BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                ARTIFACTORY_AUTH_TOKEN=cmVmdGtuOjAxOjE3MjYyMjY1MDI6cWU2U1FlazVjNjVoNUllV2pWWU1BQ0NnaHJV

                export SRP_WORKING_DIR=/srp-work
                # download Observer agent
                export PATH=/srp-tools:/srp-tools/observer/bin:$PATH
                export SRPCLIVERSION="0.15.1-20231012115959-17ea2c6-242"
                curl -o /tmp/srp-tools-linux.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/srp-tools-generic-local/all/${SRPCLIVERSION}/srp-tools-linux-amd64-${SRPCLIVERSION}.tar.gz &&
                mkdir -p /srp-tools/observer
                cd /srp-tools
                tar zxf /tmp/srp-tools-linux.tar.gz
                observer_agent --version
                srp --version
                srp update -y
                srp --version
                
                # download golang tools
                curl -o /tmp/go-linux-amd64.tar.gz  -L https://artifactory.eng.vmware.com/artifactory/golang-dist-cache/go1.19.5.linux-amd64.tar.gz
                tar zxf /tmp/go-linux-amd64.tar.gz
                export PATH=/srp-tools/go/bin:${PATH}
                go version
                
                export GITHUB_ACTION="metric-store-build-action"
                export GITHUB_FQDN="github.com"
                export GITHUB_REPOSITORY="cloudfoundry/metric-store-release"
                export GITHUB_REF="refs/heads/master"
                export FQDN="runway-ci-srp.eng.vmware.com"
                export NM="tobs-k8s-group"

                # Change to /tmp/build/fd2c3cf9/ directory
                cd -
                export JAVA_HOME=/build/toolchain/lin64/jdk-1.8.0_191
                
                alias observer_agent=./observer/bin/observer_agent.bash
                observer_agent --version

                export BUILD_NAMESPACE="tobs-k8s-group"
                export BUILD_PROJECT=${BUILD_PROJECT}
                export BUILD_ID=${BUILD_ID}
                export BRANCH_DIR=metric-store-develop
                export BUILD_BRANCH=$(cat metric-store-develop/.git/refs/heads/master)
                export OUTPUT_VERSION="1.0.0-${BUILD_ID}"
                
                observer_agent -m start_observer --output_environment envs.sh --env_to_shell
                source ./envs.sh set
                
                export CGO_ENABLED=0
                export GOPRIVATE="gitlab.eng.vmware.com/*"
                export GOPROXY="https://build-artifactory.eng.vmware.com/artifactory/proxy-golang-remote"
                export GOSUMDB="https://build-artifactory.eng.vmware.com/artifactory/go-gosumdb-remote"
                export GOROOT=$(go env GOROOT)
                echo $GOROOT                
                mkdir -p ${SRP_WORKING_DIR}

                cd metric-store-develop/src
                echo "Running go build for linux/amd64"
                GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o app-linux-amd64-nozzle cmd/cf-auth-proxy/main.go
                
                echo "Extracting incorporated dependencies from the output using go version"
                go version -m app-linux-amd64-nozzle > ${SRP_WORKING_DIR}/go-app-deps.txt
                
                # capture env used in the build
                srp util env --saveto=${SRP_WORKING_DIR}/build-env.json
                
                if [ "${ARTIFACTORY_AUTH_TOKEN}" != "" ]; then
                  PUBLISH_URL="https://artifactory.eng.vmware.com/artifactory/srp-metric-store-release-go-local/${BUILD_PROJECT}/${OUTPUT_VERSION}/app-linux-amd64-nozzle"
                  echo "=====> Publishing build output to ${PUBLISH_URL}"
                  curl -H "X-JFrog-Art-Api:${ARTIFACTORY_AUTH_TOKEN}" -T app-linux-amd64-nozzle ${PUBLISH_URL}
                else
                  echo "ARTIFACTORY_AUTH_TOKEN is not set, skipping publish to artifactory"
                fi
                cd -
                
                echo "stopping observer and cleaning up"

                observer_agent -m stop_observer -f ${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                source ./envs.sh unset
                rm -f envs.sh
                
                srp config auth \
                  --client-id $SRP_CLIENT_ID \
                  --client-secret $SRP_CLIENT_SECRET \
                  --srp-endpoint $SRP_URL
                
                srp provenance init
                
                srp provenance add-build github --action ${GITHUB_ACTION} --build-id ${BUILD_ID} --instance ${GITHUB_FQDN} --namespace ${GITHUB_REPOSITORY} --ref ${GITHUB_REF}
                
                # the actual build was done in the _build_under_observer.sh script.  This set of commands records what commands
                # where issued to do the build and imports the observations from those commands
                
                echo "adding commands and importing observations recorded in build_under_observer.sh"
                srp provenance action start --name metric-store-build-action
                srp provenance action import-observation --name=build-obs --file=${SRP_WORKING_DIR}/network_provenance.json
                cat ${SRP_WORKING_DIR}/network_provenance.json
                srp provenance action import-cmd  --cmd './metric-store-ci/srp-scan/nozzle/build_under_observer.sh' --env-file=${SRP_WORKING_DIR}/build-env.json
                srp provenance action stop
                
                # add output and all inputs.
                srp provenance schematic --verbose --path ./metric-store-ci/srp-scan/nozzle/srp_schematic.yaml
                
                srp provenance compile --saveto ${SRP_WORKING_DIR}/prov3_fragment.json
                
                echo "Created ${SRP_WORKING_DIR}/prov3_fragment_${BUILD_ID}.json"
                
                cat ${SRP_WORKING_DIR}/prov3_fragment.json
                echo

                if [ "${SRP_CLIENT_ID}" != "" ] && [ "${SRP_CLIENT_SECRET}" != "" ]; then
                  srp provenance submit --verbose --path ${SRP_WORKING_DIR}/prov3_fragment.json
                else
                  echo "Skipping SRP submission.  Both SRP_CLIENT_ID and SRP_CLIENT_SECRET must be defined"
                fi

                srp metadata status \
                  --srp-endpoint $SRP_URL
