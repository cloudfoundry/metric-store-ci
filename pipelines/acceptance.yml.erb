<% envs_we_care_about = {
  "tas-4": "tas-4_0-lite",
  "tas-5": "tas-5_0-lite",
  "tas-6": "tas-6_0-lite",
  "tas-10": "tas-10_0-lite"
} %>
---
gcs-service-account: &gcs-service-account ((metric-store.cf_denver_service_account))

resource_types:
- name: gcs-resource
  type: docker-image
  source:
    repository: harbor-docker-virtual.usw1.packages.broadcom.com/frodenas/gcs-resource
    tag: v0.5.1
    username: ((metric-store.jfrog-svc-username))
    password: ((metric-store.jfrog-svc-password))

- name: pivnet
  type: docker-image
  source:
    repository: harbor-docker-virtual.usw1.packages.broadcom.com/pivotalcf/pivnet-resource
    tag: latest-final
    username: ((metric-store.jfrog-svc-username))
    password: ((metric-store.jfrog-svc-password))

- name: shepherd
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
    tag: v1

resources:
#### TAS CVE resources
- name: concourse-cve-scan
  type: git
  source:
    uri: git@github.com:pivotal/concourse-cve-scan.git
    branch: main
    private_key: "((metric-store.svcboteos_github_private_key))"

- name: tas-cve
  type: github-release
  source:
    access_token: ((metric-store.svcboteos_github_access_token))
    repository: tas-cve
    user: pivotal

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: main

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v10.14.0 # bump to latest

- name: cf-deployment-concourse-tasks-image
  type: docker-image
  source:
    repository: harbor-docker-virtual.usw1.packages.broadcom.com/relintdockerhubpushbot/cf-deployment-concourse-tasks
    tag: latest
    username: ((metric-store.jfrog-svc-username))
    password: ((metric-store.jfrog-svc-password))

- name: denver-locks
  type: git
  source:
    uri: git@github.com:pivotal-cf/denver-locks.git
    branch: master
    private_key: ((metric-store.denver_locks_deploy_key))

- name: metric-store-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-ci
    private_key: ((metric-store.metric_store_ci_deploy_key))
    branch: master

- name: bake-image
  type: docker-image
  source:
    repository: gcr.io/cf-denver/docker-bake
    username: _json_key
    password: ((metric-store.denver_service_account_key))
    tag: latest

- name: metric-store-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: develop
    private_key: "((metric-store.svcboteos_github_private_key))"
    ignore_paths:
    - .final_builds
    - releases
    disable_ci_skip: false
    clean_tags: true

- name: metric-store-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: release-elect-new
    private_key: "((metric-store.svcboteos_github_private_key))"
    clean_tags: true

- name: metric-store-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: master-new
    private_key: "((metric-store.svcboteos_github_private_key))"
    disable_ci_skip: true
    clean_tags: true

- name: metric-store-dev-release-version
  type: semver
  source:
    driver: gcs
    bucket: metric-store-bucket
    key: ((github-branch))/((major-minor))/metric-store-dev-release-version
    initial_version: 1.7.0
    json_key: *gcs-service-account

- name: metric-store-dev-release
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    regexp: ((github-branch))/((major-minor))/metric-store-dev-releases/release-(.*).tgz

- name: metric-store-osl
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    regexp: ((github-branch))/((major-minor))/osl/(.*).txt

- name: metric-store-final-release
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    regexp: ((github-branch))/((major-minor))/artifacts/releases/.*.tgz
    json_key: *gcs-service-account

- name: metric-store-github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: metric-store-release
    access_token: ((metric-store.svcboteos_github_access_token))
    drafts: true

- name: bumper-tool
  type: git
  source:
    uri: https://github.com/loggregator/bumper

- name: grafana-boshrelease
  type: git
  source:
    uri: https://github.com/vito/grafana-boshrelease

- name: concourse-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/concourse-tasks
    branch: master

- name: golang-release
  type: git
  source:
    uri: git@github.com:bosh-packages/golang-release
    tag_filter: v*
    private_key: "((metric-store.svcboteos_github_private_key))"

- name: metric-store-version
  type: semver
  source:
    driver: gcs
    bucket: metric-store-bucket
    key: ((github-branch))/((major-minor))/versions/current_version
    json_key: *gcs-service-account
    initial_version: 0.2.0-build.24

- name: dev-tile
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    regexp: ((github-branch))/((major-minor))/temp-baked-tiles/(.*).pivotal
    initial_version: 0.2.0-build.24

- name: final-tile
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    regexp: ((github-branch))/((major-minor))/tiles/(.*).pivotal

- name: final-tile-with-osl
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    regexp: ((github-branch))/((major-minor))/final-tiles/(.*).pivotal

- name: metric-store-pivnet-metadata
  type: gcs-resource
  source:
    bucket: metric-store-bucket
    json_key: *gcs-service-account
    versioned_file: ((github-branch))/((major-minor))/pivnet/metadata.yml

- name: gcp-light-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent
    version_family: latest
    tarball: true
    preserve_filename: true

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bpm-release

- name: cf-routing-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/routing-release
    regexp: .*

- name: hourly-during-the-workday
  type: time
  source:
    location: America/Denver
    interval: 1h
    start: 7:00 AM
    stop: 7:00 PM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]

<% envs_we_care_about.each do |env_version, pool_name| %>
- name: "<%= env_version %>-env"
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: "((metric-store.shepherd_service_account_key))"
    lease:
      namespace: phoenix
      pool:
        namespace: official # Replace with the namespace that the pool is located.
        name: "<%= pool_name %>"
    output:
      json-file:
        - path: "pcf.yml"
          fields:
            password: "output.ops_manager.password"
            target: "output.ops_manager.url"
            username: "output.ops_manager.username"

<% end %>

jobs:
- name: bump-dev-release-version
  serial: true
  plan:
    - get: metric-store-dev-release-version
      params: { pre: dev }
    - put: metric-store-dev-release-version
      params: { file: metric-store-dev-release-version/version }

- name: unit-tests
  serial: true
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: bake-image
    - get: metric-store-develop
      trigger: true
  - task: run-tests
    attempts: 3
    image: bake-image
    config:
      platform: linux
      inputs:
        - name: metric-store-develop
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex
            pushd metric-store-develop
              scripts/test unit
            popd

- name: create-dev-release
  serial: true
  plan:
    - in_parallel:
      - get: metric-store-ci
      - get: metric-store-develop
        trigger: true
        passed: ["unit-tests"]
      - get: metric-store-dev-release-version
        params: { pre: dev }
      - get: cf-deployment-concourse-tasks-image
      - get: golang-release
    - task: create-dev-release
      file: metric-store-ci/tasks/create-dev-release/task.yml
      image: cf-deployment-concourse-tasks-image
      input_mapping:
        bosh-dev-release-dir: metric-store-develop
        bosh-dev-release-version: metric-store-dev-release-version
      params:
        JSON_KEY: "((metric-store.gcp_service_account_key))"
    - put: metric-store-dev-release
      params:
        file: metric-store-dev-release/release-*.tgz
        content_type: application/octet-stream
    - put: metric-store-dev-release-version
      params: { file: bosh-new-dev-release-version/version }

- name: cf-deploy
  serial_groups: [cf-deploy]
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: bbl-state
      resource: denver-locks
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment-concourse-tasks-image
  - in_parallel:
    - do:
      - get: metric-store-develop
        passed: ["create-dev-release"]
      - get: metric-store-dev-release
        trigger: true
        passed: ["create-dev-release"]
      - task: upload-metric-store-release
        file: metric-store-ci/tasks/upload-dev-release/task.yml
        image: cf-deployment-concourse-tasks-image
        input_mapping:
          bosh-release-tarball: metric-store-dev-release
        params:
          BBL_STATE_DIR: ((metric-store.bbl_state_dir))
    - do:
      - get: grafana-boshrelease
      - task: upload-grafana-release
        file: metric-store-ci/tasks/upload-release-from-resource/task.yml
        image: cf-deployment-concourse-tasks-image
        input_mapping:
          release-dir: grafana-boshrelease
        params:
          BBL_STATE_DIR: ((metric-store.bbl_state_dir))

  - task: copy-ops-files
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      inputs:
      - name: bbl-state
      - name: cf-deployment
      - name: metric-store-ci
      - name: metric-store-develop
      outputs:
      - name: ops-files
      params:
        ENV_NAME: ((env_name))
        SYS_DOMAIN: ((sys_domain))
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          set -e

          cp cf-deployment/operations/use-compiled-releases.yml ops-files
          cp cf-deployment/operations/scale-to-one-az.yml ops-files
          cp cf-deployment/operations/experimental/add-metric-store.yml ops-files
          cp metric-store-ci/ops-files/grafana-in-cf.yml ops-files
          cp metric-store-ci/ops-files/alertmanager-metric-store.yml ops-files
          cp metric-store-ci/ops-files/metric-store-in-cf.yml ops-files
          cp metric-store-ci/ops-files/bosh-speed.yml ops-files
          cp metric-store-ci/ops-files/test-clients.yml ops-files
          cp metric-store-ci/ops-files/metrics-certs-in-cf.yml ops-files

          cat > ops-files/add-blackbox-client.yml <<EOF
            - type: replace
              path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients/logcache-metrics-datadog-forwarder?
              value:
                authorities: logs.admin
                authorized-grant-types: client_credentials
                scope: logs.admin
                secret: "((yuzu_datadog_forwarder_password))"
          EOF

  - task: upload-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
  - task: cf-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      vars-files: bbl-state
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
      SYSTEM_DOMAIN: ((sys_domain))
      OPS_FILES: |
        use-compiled-releases.yml
        scale-to-one-az.yml
        test-clients.yml
        bosh-speed.yml
        add-metric-store.yml
        metric-store-in-cf.yml
        alertmanager-metric-store.yml
        grafana-in-cf.yml
        metrics-certs-in-cf.yml
        add-blackbox-client.yml
  - task: cleanup
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
  - task: create-test-space
    image: cf-deployment-concourse-tasks-image
    file: metric-store-ci/tasks/create-org-and-space/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
      ORG: test
      SPACE: test
      SYSTEM_DOMAIN: ((sys_domain))

- name: blackbox-deploy
  serial: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-dev-release
      passed: [cf-deploy]
      trigger: true
    - get: metric-store-develop
      passed: [cf-deploy]
    - get: metric-store-ci
    - get: bbl-state
      resource: denver-locks
  - task: metric-store-blackbox-deploy
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      inputs:
      - name: cf-deployment-concourse-tasks
      - name: metric-store-dev-release
      - name: metric-store-develop
      - name: metric-store-ci
      - name: bbl-state
      params:
        BBL_STATE_DIR: ((bbl_state_dir))
        # TODO: change me
        DEPLOYMENT_NAME: metric-store-blackbox
        #DATADOG_API_KEY: ((datadog_api_key))
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          source cf-deployment-concourse-tasks/shared-functions

          setup_bosh_env_vars

          cat > blackbox-creds.yml <<EOF
            - type: replace
              path: /instance_groups/name=metric-store-blackbox/jobs/name=metric-store-blackbox/properties/cf_blackbox?
              value:
                enabled: true
                metric_store_address: https://metric-store.((sys_domain))
                client_id: "((pws_datadog_forwarder_client.username))"
                client_secret: "((pws_datadog_forwarder_client.password))"
          EOF

          bosh \
            deploy metric-store-ci/deployments/blackbox/yuzu.yml \
            -o blackbox-creds.yml \
            --deployment "$DEPLOYMENT_NAME" \
            --non-interactive

- name: bake-tile
  plan:
    - in_parallel:
      - get: concourse-tasks
      - get: metric-store-ci
      - get: metric-store-develop
        passed: ["create-dev-release"]
      - get: metric-store-dev-release
        trigger: true
        passed: ["create-dev-release"]
      - get: metric-store-version
        params:
          pre: build
      - get: bake-image
      - get: gcp-light-stemcell
      - get: bpm-release
      - get: cf-routing-release
    - task: bake
      image: bake-image
      file: metric-store-ci/tasks/pas_tile_bake/task.yml
      input_mapping:
        metric-store-release: metric-store-develop
        metric-store-dev-release: metric-store-dev-release
        tile-version: metric-store-version
        stemcell: gcp-light-stemcell
    - put: dev-tile
      params:
        file: baked-tile/*.pivotal
        content_type: application/octet-stream
  ensure:
    put: metric-store-version
    params:
      file: new-tile-version/version

- name: scan-tile-for-cves
  serial: true
  plan:
    - in_parallel:
        - get: tile
          resource: dev-tile
          passed: [ bake-tile ]
          trigger: true
        - get: tas-cve
        - get: concourse-cve-scan
        - get: tile-version
          resource: metric-store-version
    - task: scan-tile
      file: concourse-cve-scan/tasks/scan-tile/scan-tile.yml
      params:
        GRYPE_FAILURE_LEVEL: high
        DRY_RUN: false
        TILE_NAME: p-metric-store

<% envs_we_care_about.each do |env_version, pool_name| %>
- name: "install-on-<%= env_version %>"
  plan:
  - in_parallel:
    - get: concourse-tasks
    - get: metric-store-ci
    - get: metric-store-develop
      passed: [bake-tile]
    - get: metric-store-dev-release
      passed: [bake-tile]
    - get: bake-image
    - get: metric-store-version
      passed: [bake-tile]
    - get: dev-tile
      trigger: true
      passed: [bake-tile]
    - get: gcp-light-stemcell
      passed: [bake-tile]
    - put: environment
      resource: "<%= env_version %>-env"
      params:
        action: create
        duration: 12h
        resource: "<%= env_version %>-env"
      timeout: 12h
  - task: upload-and-config
    input_mapping:
      tile-version: metric-store-version
      baked-tile: dev-tile
    image: bake-image
    file: metric-store-ci/tasks/tile_install/task-prep.yml
  - task: apply-changes-cf
    attempts: 3
    image: bake-image
    file: metric-store-ci/tasks/tile_install/task-apply-cf.yml
  - task: apply-changes-metric-store
    attempts: 3
    image: bake-image
    file: metric-store-ci/tasks/tile_install/task-apply-ms.yml
<% end %>

- name: promotion-gate
  serial: true
  plan:
    - in_parallel:
      - get: metric-store-ci
      - get: gcp-light-stemcell
        passed: [bake-tile]
      - get: bpm-release
        passed: [bake-tile]
      - get: cf-routing-release
        passed: [bake-tile]
      - get: develop
        resource: metric-store-develop
        trigger: true
        passed:
          <% envs_we_care_about.each do |name, _| %>
          - "install-on-<%= name %>"
          <% end %>

- name: promote-to-release-elect
  serial: true
  plan:
  - in_parallel:
    - get: develop
      resource: metric-store-develop
      trigger: true
      passed:
        - promotion-gate
  - get: metric-store-release-elect
  - put: metric-store-release-elect
    params:
      repository: develop

- name: promote-to-master
  serial: true
  plan:
  - in_parallel:
    - get: hourly-during-the-workday
      trigger: true
    - get: metric-store-release-elect
      passed: ["promote-to-release-elect"]
      trigger: true
    - get: metric-store-master
    - get: bake-image
    - get: bumper-tool
    - get: metric-store-ci
  - task: bumper
    image: bake-image
    file: metric-store-ci/tasks/bumper/task.yml
    input_mapping:
      source: metric-store-release-elect
      dest: metric-store-master
    params:
      SOURCE_BRANCH: release-elect-new
      DEST_BRANCH: master
      TRACKER_API_TOKEN: ((metric-store.tracker_token))
  - put: metric-store-master
    params:
      repository: merged-dest

- name: build-final-release
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: bake-image
    - get: metric-store-pivnet-metadata
    - get: metric-store-develop
    - get: metric-store-master
      passed: [ promote-to-master ]
    - get: gcp-light-stemcell
      passed: [ promotion-gate ]
    - get: bpm-release
      passed: [ promotion-gate ]
    - get: cf-routing-release
      passed: [ promotion-gate ]
  - task: create-final-release
    file: metric-store-ci/tasks/create-final-metric-store-release/task.yml
    image: bake-image
    input_mapping:
      pivnet-metadata: metric-store-pivnet-metadata
      metric-store-develop: metric-store-develop
    params:
      JSON_KEY: *gcs-service-account
  - put: metric-store-develop
    params:
      repository: metric-store-develop-modified
      rebase: false
  - put: metric-store-master
    params:
      repository: metric-store-master-modified
      rebase: false
  - put: metric-store-final-release
    params:
      file: metric-store-final-release/release-*.tgz
      content_type: application/octet-stream

- name: publish-github-release
  serial: true
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: metric-store-pivnet-metadata
      trigger: true
      passed: [build-final-release]
    - get: metric-store-final-release
    - get: metric-store-ci
    - get: bake-image
  - task: github-publish-release-metadata
    file: metric-store-ci/tasks/publish-github-release/task.yml
    image: bake-image
    input_mapping:
      release-version: metric-store-pivnet-metadata
      release-tarball: metric-store-final-release
    params:
      PROJECT_NAME: Metric Store
  - put: metric-store-github-release
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: bake-final-tile
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: bake-image
    - get: metric-store-pivnet-metadata
      passed: [ build-final-release ]
      trigger: true
    - get: metric-store-master
      passed: [ build-final-release ]
    - get: gcp-light-stemcell
      passed: [ build-final-release ]
    - get: bpm-release
      passed: [ build-final-release ]
    - get: cf-routing-release
      passed: [ build-final-release ]
    - get: metric-store-final-release
      passed: [ build-final-release ]
  - task: bake-final-tile
    file: metric-store-ci/tasks/tile_bake_final/task.yml
    image: bake-image
    input_mapping:
      pivnet-metadata: metric-store-pivnet-metadata
      stemcell: gcp-light-stemcell
  - put: final-tile
    params:
      file: baked-tile/*.pivotal
      content_type: application/octet-stream

- name: push-tile-with-osl-to-gcp
  plan:
  - get: metric-store-ci
  - get: bake-image
  - get: final-tile
    passed:
    - bake-final-tile
  - get: metric-store-pivnet-metadata
    passed:
    - bake-final-tile
    trigger: true
  - get: metric-store-osl
  - task: inject-osl-into-tile
    image: bake-image
    file: metric-store-ci/tasks/add-osl/task.yml
  - put: final-tile-with-osl
    params:
      file_glob: final-tile/*.pivotal
      content_type: application/octet-stream
      override: false # do not re-upload already uploaded version
