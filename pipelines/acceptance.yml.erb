<% envs_we_care_about = { "2.7": "us_2_7", "2.8": "us_2_8", "2.9": "us_2_9", "2.10": "us_2_10" } %>
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource
    tag: v0.5.1

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: main

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v10.14.0 # bump to latest

- name: cf-deployment-concourse-tasks-image
  type: docker-image
  source:
    repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
    tag: latest

- name: denver-locks
  type: git
  source:
    uri: git@github.com:pivotal-cf/denver-locks.git
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: metric-store-deployments
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-deployments
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: metric-store-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-ci
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    branch: master

- name: pcf-observability-ci-image
  type: docker-image
  source:
    repository: gcr.io/cf-denver/pcf-observability-ci
    username: _json_key
    password: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: metric-store-tile-image
  type: docker-image
  source:
    repository: gcr.io/cf-loggregator-log-cache/metric-store-tile
    username: _json_key
    password: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: metric-store-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: develop
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    ignore_paths:
    - .final_builds
    - releases
    disable_ci_skip: false
    clean_tags: true

- name: metric-store-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: release-elect
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    clean_tags: true

- name: metric-store-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: master
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    disable_ci_skip: true
    clean_tags: true

- name: metric-store-dev-release-version
  type: semver
  source:
    driver: gcs
    bucket: metric-store-ci-notifications
    key: metric-store-dev-release-version
    initial_version: 0.0.0
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: metric-store-dev-release
  type: gcs-resource
  source:
    bucket: metric-store-ci-notifications
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    regexp: metric-store-dev-releases/release-(.*).tgz

- name: metric-store-osl
  type: gcs-resource
  source:
    bucket: p-metric-store-release
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    regexp: osl/(.*).txt

- name: metric-store-final-release
  type: gcs-resource
  source:
    bucket: oss-metric-store-releases
    versioned_file: release.tgz
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: metric-store-github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: metric-store-release
    access_token: ((github-key-ci.yml/Notes/github-access-token))
    drafts: true

- name: bumper-tool
  type: git
  source:
    uri: https://github.com/loggregator/bumper

- name: grafana-boshrelease
  type: git
  source:
    uri: https://github.com/vito/grafana-boshrelease

- name: concourse-tasks
  type: git
  source:
    uri: https://github.com/pivotal-cf/concourse-tasks
    branch: master

- name: golang-release
  type: git
  source:
    uri: git@github.com:bosh-packages/golang-release
    branch: master
    tag_filter: v*
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack-ci.yml/Notes/slack_high_visibility_alert_webhook_url))

- name: notification-cf-deploy-version
  type: semver
  source:
    driver: gcs
    bucket: metric-store-ci-notifications
    key: log-cache-slack-cf-deploy-version
    initial_version: 0.0.0
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: metric-store-version
  type: semver
  source:
    driver: gcs
    bucket: metric-store-ci-versions
    key: metric-store-release-acceptance-tile
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    initial_version: 0.2.0-build.24

- name: dev-tile
  type: gcs-resource
  source:
    bucket: metric-store-ci-notifications
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    regexp: temp-baked-tiles/(.*).pivotal
    initial_version: 0.2.0-build.24

- name: final-tile
  type: gcs-resource
  source:
    bucket: p-metric-store-release
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    regexp: tiles/(.*).pivotal

- name: metric-store-pivnet-metadata
  type: gcs-resource
  source:
    bucket: p-metric-store-release
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    versioned_file: pivnet/metadata.yml

- name: gcp-light-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent
    version_family: latest
    tarball: true
    preserve_filename: true

- name: metric-store-pivnet
  type: pivnet
  source:
    api_token: ((release-credentials.yml/Notes/pivnet-token-metric-store))
    product_slug: p-metric-store

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bpm-release

- name: bosh-dns-aliases-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bosh-dns-aliases-release

- name: cf-routing-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/cf-routing-release
    regexp: .*188.*

- name: hourly-during-the-workday
  type: time
  source:
    location: America/Denver
    interval: 1h
    start: 7:00 AM
    stop: 7:00 PM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]

shared:
  - &send-alert-message
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        text_file: messages/success.txt

jobs:
- name: bump-dev-release-version
  serial: true
  plan:
    - get: metric-store-dev-release-version
      params: { pre: dev }
    - put: metric-store-dev-release-version
      params: { file: metric-store-dev-release-version/version }

- name: unit-tests
  serial: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: metric-store-develop
      trigger: true
  - task: create-slack-message
    file: metric-store-ci/tasks/alert-message-create/task.yml
    params:
      TITLE: Metric Store Unit Tests
      TEAM: metric-store-log-cache
  - task: run-tests
    attempts: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: logcache/base
      inputs:
        - name: metric-store-develop
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex
            pushd metric-store-develop
              scripts/test unit
            popd
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_failure

- name: create-dev-release
  serial: true
  plan:
    - in_parallel:
      - get: metric-store-ci
      - get: metric-store-develop
        trigger: true
        passed: ["unit-tests"]
      - get: metric-store-dev-release-version
        params: { pre: dev }
      - get: cf-deployment-concourse-tasks-image
      - get: golang-release
    - task: create-dev-release
      file: metric-store-ci/tasks/create-dev-release/task.yml
      image: cf-deployment-concourse-tasks-image
      input_mapping:
        bosh-dev-release-dir: metric-store-develop
        bosh-dev-release-version: metric-store-dev-release-version
      params:
        JSON_KEY: ((release-credentials.yml/Notes/gcp-service-account-key))
    - put: metric-store-dev-release
      params:
        file: metric-store-dev-release/release-*.tgz
        content_type: application/octet-stream
    - put: metric-store-dev-release-version
      params: { file: bosh-new-dev-release-version/version }

- name: cf-deploy
  serial_groups: [cf-deploy]
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: bbl-state
      resource: denver-locks
    - get: cf-deployment
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment-concourse-tasks-image
    - get: notification-cf-deploy-version
      params: { bump: patch }
  - task: create-slack-message
    file: metric-store-ci/tasks/alert-message-create/task.yml
    input_mapping: { slack-rate-limit-version: notification-cf-deploy-version }
    params:
      TITLE: Metric Store CF Deploy
      TEAM: metric-store-log-cache
  - task: set-credhub-vars
    file: metric-store-ci/tasks/add-credhub-vars/task.yml
    params:
      WEBHOOK_URL: ((slack-ci.yml/Notes/slack_high_visibility_alert_webhook_url))
      BBL_STATE_DIR: ((bbl_state_dir))
      SYSTEM_DOMAIN: ((sys_domain))
  - in_parallel:
    - do:
      - get: metric-store-develop
        passed: ["create-dev-release"]
      - get: metric-store-dev-release
        trigger: true
        passed: ["create-dev-release"]
      - task: upload-metric-store-release
        file: metric-store-ci/tasks/upload-dev-release/task.yml
        image: cf-deployment-concourse-tasks-image
        input_mapping:
          bosh-release-tarball: metric-store-dev-release
        params:
          BBL_STATE_DIR: ((bbl_state_dir))
    - do:
      - get: grafana-boshrelease
      - task: upload-grafana-release
        file: metric-store-ci/tasks/upload-release-from-resource/task.yml
        image: cf-deployment-concourse-tasks-image
        input_mapping:
          release-dir: grafana-boshrelease
        params:
          BBL_STATE_DIR: ((bbl_state_dir))

  - task: copy-ops-files
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      inputs:
      - name: bbl-state
      - name: cf-deployment
      - name: metric-store-ci
      - name: metric-store-develop
      outputs:
      - name: ops-files
      params:
        ENV_NAME: ((env_name))
        SYS_DOMAIN: ((sys_domain))
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          set -e

          cp cf-deployment/operations/use-compiled-releases.yml ops-files
          cp cf-deployment/operations/scale-to-one-az.yml ops-files
          cp cf-deployment/operations/experimental/add-metric-store.yml ops-files
          cp metric-store-ci/ops-files/grafana-in-cf.yml ops-files
          cp metric-store-ci/ops-files/alertmanager-metric-store.yml ops-files
          cp metric-store-ci/ops-files/metric-store-in-cf.yml ops-files
          cp metric-store-ci/ops-files/bosh-speed.yml ops-files
          cp metric-store-ci/ops-files/test-clients.yml ops-files
          cp metric-store-ci/ops-files/metrics-certs-in-cf.yml ops-files

          cat > ops-files/add-blackbox-client.yml <<EOF
            - type: replace
              path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients/logcache-metrics-datadog-forwarder?
              value:
                authorities: logs.admin
                authorized-grant-types: client_credentials
                scope: logs.admin
                secret: ((yuzu-datadog-forwarder-client/Password))
          EOF

  - task: upload-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
  - task: cf-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      vars-files: bbl-state
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
      SYSTEM_DOMAIN: ((sys_domain))
      OPS_FILES: |
        use-compiled-releases.yml
        scale-to-one-az.yml
        test-clients.yml
        bosh-speed.yml
        add-metric-store.yml
        metric-store-in-cf.yml
        alertmanager-metric-store.yml
        grafana-in-cf.yml
        metrics-certs-in-cf.yml
        add-blackbox-client.yml
  - task: cleanup
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
  - task: create-test-space
    file: metric-store-ci/tasks/create-org-and-space/task.yml
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
      ORG: test
      SPACE: test
      SYSTEM_DOMAIN: ((sys_domain))
  on_failure:
    do:
    - put: notification-cf-deploy-version
      params: { file: notification-cf-deploy-version/version }
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_failure
    - task: enable-disable-alert-failure
      file: metric-store-ci/tasks/enable-disable-alert-failure/task.yml
      input_mapping: { slack-rate-limit-version: notification-cf-deploy-version }
      params: { alert_multiple: 5, ignore_first: true }
  on_success:
    do:
    - task: enable-disable-alert-success
      file: metric-store-ci/tasks/enable-disable-alert-success/task.yml
      input_mapping: { slack-rate-limit-version: notification-cf-deploy-version }
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        text_file: modified-metadata/alert_toggle
        attachments_file: modified-metadata/alert_message_success
    - put: notification-cf-deploy-version
      params: { bump: minor }

- name: blackbox-deploy
  serial: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-dev-release
      passed: [cf-deploy]
      trigger: true
    - get: metric-store-develop
      passed: [cf-deploy]
    - get: metric-store-ci
    - get: bbl-state
      resource: denver-locks
  - task: metric-store-blackbox-deploy
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      inputs:
      - name: cf-deployment-concourse-tasks
      - name: metric-store-dev-release
      - name: metric-store-develop
      - name: metric-store-ci
      - name: bbl-state
      params:
        BBL_STATE_DIR: ((bbl_state_dir))
        # TODO: change me
        DEPLOYMENT_NAME: metric-store-blackbox
        #DATADOG_API_KEY: ((datadog-api-key-pws.yml/Notes/datadog_api_key))
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          source cf-deployment-concourse-tasks/shared-functions

          setup_bosh_env_vars

          cat > blackbox-creds.yml <<EOF
            - type: replace
              path: /instance_groups/name=metric-store-blackbox/jobs/name=metric-store-blackbox/properties/cf_blackbox?
              value:
                enabled: true
                metric_store_address: https://metric-store.((sys_domain))
                client_id: ((pws-datadog-forwarder-client/Username))
                client_secret: ((pws-datadog-forwarder-client/Password))
          EOF

          bosh \
            deploy metric-store-ci/deployments/blackbox/yuzu.yml \
            -o blackbox-creds.yml \
            --deployment "$DEPLOYMENT_NAME" \
            --non-interactive

- name: "Bake PAS Tile"
  plan:
    - in_parallel:
      - get: concourse-tasks
      - get: metric-store-ci
      - get: metric-store-develop
        passed: ["create-dev-release"]
      - get: metric-store-dev-release
        trigger: true
        passed: ["create-dev-release"]
      - get: metric-store-version
        params:
          pre: build
      - get: pcf-observability-ci-image
      - get: gcp-light-stemcell
      - get: bpm-release
      - get: bosh-dns-aliases-release
      - get: cf-routing-release
    - task: "bake tile"
      image: pcf-observability-ci-image
      file: metric-store-ci/tasks/pas_tile_bake/task.yml
      input_mapping:
        metric-store-release: metric-store-develop
        metric-store-dev-release: metric-store-dev-release
        tile-version: metric-store-version
        stemcell: gcp-light-stemcell
    - put: dev-tile
      params:
        file: baked-tile/*.pivotal
        content_type: application/octet-stream
  ensure:
    put: metric-store-version
    params:
      file: new-tile-version/version

- name: "Install Tile on PAS acceptance env"
  plan:
    - in_parallel:
      - get: concourse-tasks
      - get: metric-store-ci
      - get: metric-store-develop
        passed: ["Bake PAS Tile"]
      - get: metric-store-dev-release
        passed: ["Bake PAS Tile"]
      - get: pcf-observability-ci-image
      - get: metric-store-version
        passed: ["Bake PAS Tile"]
      - get: dev-tile
        trigger: true
        passed: ["Bake PAS Tile"]
      - get: gcp-light-stemcell
        passed: ["Bake PAS Tile"]
    - task: "install tile"
      image: pcf-observability-ci-image
      file: metric-store-ci/tasks/tile_install/task.yml
      input_mapping:
        tile-version: metric-store-version
        baked-tile: dev-tile
      params:
        TOOLSMITHS_ENV_JSON: ((ms-pas-acceptance.json/Notes))

<% envs_we_care_about.each do |env_version, pool_name| %>
- name: "Install on PCF <%= env_version %>"
  plan:
  - in_parallel:
    - get: concourse-tasks
    - get: metric-store-ci
    - get: metric-store-develop
      passed: ["Bake PAS Tile"]
    - get: metric-store-dev-release
      passed: ["Bake PAS Tile"]
    - get: pcf-observability-ci-image
    - get: metric-store-tile-image
    - get: metric-store-version
      passed: ["Bake PAS Tile"]
    - get: dev-tile
      trigger: true
      passed: ["Bake PAS Tile"]
    - get: gcp-light-stemcell
      passed: ["Bake PAS Tile"]
  - task: "Claim Smith Env"
    attempts: 3
    tags: [ vsphere-nimbus ]
    image: metric-store-tile-image
    config:
      platform: linux
      outputs:
      - name: environment
      run:
        path: sh
        args:
        - "-c"
        - |
          set -eu
          # exports smith environment name to `env`
          $(smith claim -p <%= pool_name %> -n "cf-metric-store CI" | tail -1)
          echo "Claimed smith environment: ${env}"
          echo ${env} > environment/name
          smith read > environment/metadata
    on_failure:
      task: release-env
      tags: [ vsphere-nimbus ]
      image: metric-store-tile-image
      config:
        platform: linux
        run:
          path: sh
          args:
          - "-c"
          - |
            set -e
            sleep 10
    params:
      TOOLSMITHS_API_TOKEN: ((smith-token-cf-denver/Notes))
  - task: "Upload and Config"
    input_mapping:
      tile-version: metric-store-version
      baked-tile: dev-tile
    image: pcf-observability-ci-image
    file: metric-store-ci/tasks/tile_install/task-prep.yml
  - task: "Apply Changes CF"
    attempts: 3
    image: pcf-observability-ci-image
    file: metric-store-ci/tasks/tile_install/task-apply-cf.yml
  - task: "Apply Changes Metric Store"
    attempts: 3
    image: pcf-observability-ci-image
    file: metric-store-ci/tasks/tile_install/task-apply-ms.yml
    on_success:
      task: release-env
      tags: [ vsphere-nimbus ]
      image: metric-store-tile-image
      config:
        platform: linux
        inputs:
        - name: environment
        run:
          path: sh
          args:
          - "-c"
          - |
            set -e
            smith unclaim -e $(cat environment/name)
      params:
        TOOLSMITHS_API_TOKEN: ((smith-token-cf-denver/Notes))
<% end %>

- name: promotion-gate
  serial: true
  plan:
    - in_parallel:
      - get: gcp-light-stemcell
        passed: ["Bake PAS Tile"]
      - get: bpm-release
        passed: ["Bake PAS Tile"]
      - get: bosh-dns-aliases-release
        passed: ["Bake PAS Tile"]
      - get: cf-routing-release
        passed: ["Bake PAS Tile"]
      - get: develop
        resource: metric-store-develop
        trigger: true
        passed:
          <% envs_we_care_about.each do |name, _| %>
          - "Install on PCF <%= name %>"
          <% end %>

- name: promote-to-release-elect
  serial: true
  plan:
  - in_parallel:
    - get: develop
      resource: metric-store-develop
      trigger: true
      passed:
        - promotion-gate
  - get: metric-store-release-elect
  - put: metric-store-release-elect
    params:
      repository: develop

- name: promote-to-master
  serial: true
  plan:
  - in_parallel:
    - get: hourly-during-the-workday
      trigger: true
    - get: metric-store-release-elect
      passed: ["promote-to-release-elect"]
      trigger: true
    - get: metric-store-master
    - get: bumper-tool
    - get: metric-store-ci
  - task: bumper
    file: metric-store-ci/tasks/bumper/task.yml
    input_mapping:
      source: metric-store-release-elect
      dest: metric-store-master
    params:
      SOURCE_BRANCH: release-elect
      DEST_BRANCH: master
      TRACKER_API_TOKEN: ((tracker-key-ci.yml/Notes/tracker_api_token))
  - put: metric-store-master
    params:
      repository: merged-dest

- name: build-final-release
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: pcf-observability-ci-image
    - get: metric-store-pivnet-metadata
    - get: metric-store-develop
    - get: metric-store-master
      passed: [ promote-to-master ]
    - get: gcp-light-stemcell
      passed: [ promotion-gate ]
    - get: bpm-release
      passed: [ promotion-gate ]
    - get: bosh-dns-aliases-release
      passed: [ promotion-gate ]
    - get: cf-routing-release
      passed: [ promotion-gate ]
  - task: create-slack-message
    file: metric-store-ci/tasks/alert-message-create/task.yml
    params:
      TITLE: Building Final Release
      TEAM: metric-store-log-cache
  - task: create-final-release
    file: metric-store-ci/tasks/create-final-metric-store-release/task.yml
    input_mapping:
      pivnet-metadata: metric-store-pivnet-metadata
      metric-store-develop: metric-store-develop
    params:
      JSON_KEY: ((release-credentials.yml/Notes/gcp-service-account-key))
  - put: metric-store-develop
    params:
      repository: metric-store-develop-modified
      rebase: false
  - put: metric-store-master
    params:
      repository: metric-store-master-modified
      rebase: false
  - put: metric-store-final-release
    params:
      file: metric-store-final-release/release-*.tgz
      content_type: application/octet-stream
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_failure
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_success

- name: publish-github-release
  serial: true
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: metric-store-pivnet-metadata
      trigger: true
      passed: [build-final-release]
    - get: metric-store-final-release
    - get: metric-store-ci
  - task: github-publish-release-metadata
    file: metric-store-ci/tasks/publish-github-release/task.yml
    input_mapping:
      release-version: metric-store-pivnet-metadata
      release-tarball: metric-store-final-release
    params:
      PROJECT_NAME: Metric Store
  - put: metric-store-github-release
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: tag-dependencies
  serial: true
  disable_manual_trigger: true
  plan:
  - in_parallel:
    - get: metric-store-pivnet-metadata
      trigger: true
      passed: [publish-github-release]
    - get: metric-store-ci
    - get: metric-store-deployments
    - get: denver-locks
    - get: cf-deployment-concourse-tasks
  - task: snapshot-acceptance-environment
    file: metric-store-ci/tasks/snapshot-acceptance-environment/task.yml
    input_mapping:
      bbl-state: denver-locks
      release-version: metric-store-pivnet-metadata
    params:
      BBL_STATE_DIR: ((bbl_state_dir))
  - put: metric-store-deployments
    params:
      repository: metric-store-deployments-modified
      tag: release-version-generated/version
      tag_prefix: v
  - put: metric-store-ci
    params:
      repository: metric-store-ci
      tag: release-version-generated/version
      tag_prefix: v
      only_tag: true
  on_success:
    do:
    - task: create-message
      file: metric-store-ci/tasks/alert-message-release-end/task.yml
      input_mapping:
        version: release-version-generated
    - <<: *send-alert-message

- name: Bake Final Tile
  plan:
  - in_parallel:
    - get: metric-store-ci
    - get: pcf-observability-ci-image
    - get: metric-store-pivnet-metadata
      passed: [ build-final-release ]
    - get: metric-store-master
      passed: [ build-final-release ]
    - get: gcp-light-stemcell
      passed: [ build-final-release ]
    - get: bpm-release
      passed: [ build-final-release ]
    - get: bosh-dns-aliases-release
      passed: [ build-final-release ]
    - get: cf-routing-release
      passed: [ build-final-release ]
    - get: metric-store-final-release
      passed: [ build-final-release ]
  - task: create-slack-message
    file: metric-store-ci/tasks/alert-message-create/task.yml
    params:
      TITLE: Releasing Final Tile
      TEAM: metric-store-log-cache
  - task: bake-final-tile
    file: metric-store-ci/tasks/tile_bake_final/task.yml
    image: pcf-observability-ci-image
    input_mapping:
      pivnet-metadata: metric-store-pivnet-metadata
      stemcell: gcp-light-stemcell
  - put: final-tile
    params:
      file: baked-tile/*.pivotal
      content_type: application/octet-stream
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_failure
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_success


- name: Push to Pivnet
  plan:
  - get: metric-store-ci
  - task: create-slack-message
    file: metric-store-ci/tasks/alert-message-create/task.yml
    params:
      TITLE: Uploading Final Tile to PivNet
      TEAM: metric-store-log-cache
  - get: final-tile
    passed:
    - "Bake Final Tile"
  - get: metric-store-pivnet-metadata
    passed:
    - "Bake Final Tile"
  - get: metric-store-osl
  - task: "inject OSL to tile"
    file: metric-store-ci/tasks/add-osl/task.yml
  - put: metric-store-pivnet
    params:
      file_glob: final-tile/*.pivotal
      metadata_file: metric-store-pivnet-metadata/metadata.yml
      override: false # do not re-upload already uploaded version
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_failure
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_high_visibility_alert_channel))
        attachments_file: metadata/alert_message_success
