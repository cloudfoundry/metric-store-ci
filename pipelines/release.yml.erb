<% projects =
  {
    log_cache: { initial_version: "2.3.0" },
    log_cache_cli: { initial_version: "2.1.0" },
    oss_metric_store_release: { initial_version: "1.1.2" },
  }
%>
groups:
- name: all
  jobs:
  - lcr-patch-version
  - lcr-minor-version
  - lcr-major-version
  - create-lcr-final-release
  - publish-lcr-github-release
  - tag-lcr-for-backports
  - oss-msr-patch-version
  - oss-msr-minor-version
  - oss-msr-major-version
  - create-oss-msr-final-release
  - publish-oss-msr-github-release
  - tag-oss-msr-for-backports
  - log-cache-cli-bump-minor
  - log-cache-cli-bump-major
  - log-cache-cli-create-final-release
- name: log-cache-release
  jobs:
  - lcr-patch-version
  - lcr-minor-version
  - lcr-major-version
  - create-lcr-final-release
  - publish-lcr-github-release
  - tag-lcr-for-backports
- name: oss-metric-store-release
  jobs:
  - oss-msr-patch-version
  - oss-msr-minor-version
  - oss-msr-major-version
  - create-oss-msr-final-release
  - publish-oss-msr-github-release
  - tag-oss-msr-for-backports
- name: log-cache-cli
  jobs:
  - log-cache-cli-bump-minor
  - log-cache-cli-bump-major
  - log-cache-cli-create-final-release

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    tag: v*

- name: cf-deployment-concourse-tasks-image
  type: docker-image
  source:
    repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
    tag: v5.20.0

- name: log-cache-cli
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-cli
    private_key: ((github-key-ci.yml/Notes/github_key))
    branch: master

- name: log-cache-cli-version
  type: semver
  source:
    initial_version: <%= projects[:log_cache_cli][:initial_version] %>
    bucket: loggregator-ci-versions
    key: log-cache-cli
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: log-cache-release-version
  type: semver
  source:
    initial_version: <%= projects[:log_cache][:initial_version] %>
    bucket: loggregator-ci-versions
    key: log-cache
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: log-cache-release-version-major
  type: semver
  source:
    initial_version: <%= projects[:log_cache][:initial_version] %>
    bucket: loggregator-ci-versions
    key: log-cache
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: log-cache-release-version-minor
  type: semver
  source:
    initial_version: <%= projects[:log_cache][:initial_version] %>
    bucket: loggregator-ci-versions
    key: log-cache
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: log-cache-release-version-patch
  type: semver
  source:
    initial_version: <%= projects[:log_cache][:initial_version] %>
    bucket: loggregator-ci-versions
    key: log-cache
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: oss-metric-store-release-version
  type: semver
  source:
    initial_version: <%= projects[:oss_metric_store_release][:initial_version] %>
    driver: gcs
    bucket: metric-store-ci-versions
    key: oss-metric-store
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: oss-metric-store-release-version-major
  type: semver
  source:
    initial_version: <%= projects[:oss_metric_store_release][:initial_version] %>
    driver: gcs
    bucket: metric-store-ci-versions
    key: oss-metric-store
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: oss-metric-store-release-version-minor
  type: semver
  source:
    initial_version: <%= projects[:oss_metric_store_release][:initial_version] %>
    driver: gcs
    bucket: metric-store-ci-versions
    key: oss-metric-store
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: oss-metric-store-release-version-patch
  type: semver
  source:
    initial_version: <%= projects[:oss_metric_store_release][:initial_version] %>
    driver: gcs
    bucket: metric-store-ci-versions
    key: oss-metric-store
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

- name: log-cache-cli-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: log-cache-cli
    access_token: ((github-key-ci.yml/Notes/github-access-token))
    drafts: true

- name: metric-store-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-ci
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache-deployments
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-deployments
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: denver-locks
  type: git
  source:
    uri: git@github.com:pivotal-cf/denver-locks
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: develop
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: log-cache-release
    access_token: ((github-key-ci.yml/Notes/github-access-token))
    drafts: true

- name: oss-metric-store-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: develop
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    clean_tags: true

- name: oss-metric-store-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/metric-store-release
    branch: master
    private_key: ((github-key-ci.yml/Notes/ms_github_private_key))
    clean_tags: true

- name: oss-metric-store-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: metric-store-release
    access_token: ((github-key-ci.yml/Notes/metric-store-access-token))
    drafts: true

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack-ci.yml/Notes/slack_alert_webhook_url))

- name: log-cache-release-tarball
  type: s3
  source:
    bucket: log-cache-final-releases
    versioned_file: release.tgz
    region_name: us-east-2
    access_key_id: ((release-credentials.yml/Notes/loggregator-team-s3-access-key))
    secret_access_key: ((release-credentials.yml/Notes/loggregator-team-s3-secret-key))

- name: oss-metric-store-release-tarball
  type: gcs-resource
  source:
    bucket: oss-metric-store-releases
    versioned_file: release.tgz
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))

shared:
  - &send-alert-message
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text_file: messages/success.txt

jobs:
- name: lcr-patch-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: log-cache-release-version-patch
      params: {bump: patch}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: log-cache-release-version-patch
    params:
      LEVEL: patch
      APP: log-cache
  on_success:
    do:
    - put: log-cache-release-version
      params: {file: log-cache-release-version-patch/version}
    - put: log-cache-release-version-patch
      params: {file: log-cache-release-version-patch/version}
    - <<: *send-alert-message

- name: lcr-minor-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: log-cache-release-version-minor
      params: {bump: minor}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: log-cache-release-version-minor
    params:
      LEVEL: minor
      APP: log-cache
  on_success:
    do:
    - put: log-cache-release-version
      params: {file: log-cache-release-version-minor/version}
    - put: log-cache-release-version-minor
      params: {file: log-cache-release-version-minor/version}
    - <<: *send-alert-message

- name: lcr-major-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: log-cache-release-version-major
      params: {bump: major}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: log-cache-release-version-major
    params:
      LEVEL: major
      APP: log-cache
  on_success:
    do:
    - put: log-cache-release-version
      params: {file: log-cache-release-version-major/version}
    - put: log-cache-release-version-major
      params: {file: log-cache-release-version-major/version}
    - <<: *send-alert-message

- name: create-lcr-final-release
  serial: true
  disable_manual_trigger: true
  plan:
  - get: log-cache-release-version-patch
    trigger: true
    passed: [lcr-patch-version]
  - get: log-cache-release-version-minor
    trigger: true
    passed: [lcr-minor-version]
  - get: log-cache-release-version-major
    trigger: true
    passed: [lcr-major-version]
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: log-cache-release-develop
    - get: log-cache-release-master
    - get: metric-store-ci
    - get: log-cache-release-version
    - get: log-cache
  - task: create-final-release
    file: metric-store-ci/tasks/create-final-release/task.yml
    params:
      JSON_KEY: ((release-credentials.yml/Notes/gcp-service-account-key))
  - put: log-cache-release-tarball
    params:
      file: release-tarball/release.tgz
  - put: log-cache-release-master
    params:
      repository: log-cache-release-master-modified
      rebase: false
  - put: log-cache-release-develop
    params:
      repository: log-cache-release-develop-modified
      rebase: false
  - put: log-cache
    params:
      repository: log-cache-modified
      only_tag: true

- name: publish-lcr-github-release
  serial: true
  disable_manual_trigger: true
  plan:
  - aggregate:
    - get: log-cache-release-version
      trigger: true
      passed: [create-lcr-final-release]
    - get: log-cache-release-tarball
    - get: metric-store-ci
  - task: github-publish-release-metadata
    file: metric-store-ci/tasks/publish-github-release/task.yml
    input_mapping:
      release-version: log-cache-release-version
      release-tarball: log-cache-release-tarball
    params:
      PROJECT_NAME: Log Cache
  - put: log-cache-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: tag-lcr-for-backports
  serial: true
  disable_manual_trigger: true
  plan:
  - aggregate:
    - get: log-cache-release-version
      trigger: true
      passed: [publish-lcr-github-release]
    - get: metric-store-ci
    - get: log-cache-deployments
    - get: denver-locks
    - get: cf-deployment-concourse-tasks
  - do:
    - task: snapshot-acceptance-environment
      file: metric-store-ci/tasks/snapshot-acceptance-environment/task.yml
      input_mapping:
        bbl-state: denver-locks
        log-cache-deployments: log-cache-deployments
        release-version: log-cache-release-version
      params:
        BBL_STATE_DIR: ((bbl_state_dir))
    - put: log-cache-deployments
      params:
        repository: log-cache-deployments-modified
        tag_prefix: log-cache-v
        tag: log-cache-release-version/version
  - put: metric-store-ci
    params:
      repository: metric-store-ci
      tag: log-cache-release-version/version
      tag_prefix: log-cache-v
      only_tag: true
  on_success:
    do:
    - task: create-message
      file: metric-store-ci/tasks/alert-message-release-end/task.yml
      input_mapping:
        version: log-cache-release-version
    - <<: *send-alert-message

- name: oss-msr-patch-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: oss-metric-store-release-version
    - get: oss-metric-store-release-version-patch
      params: {bump: patch}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: oss-metric-store-release-version-patch
    params:
      LEVEL: patch
      APP: metric-store
  - task: sync-versioning
    file: metric-store-ci/tasks/sync_versions/patch.yml
    input_mapping:
      this-version: oss-metric-store-release-version-patch
      main-version: oss-metric-store-release-version
  on_success:
    do:
    - put: oss-metric-store-release-version
      params: {file: new-main-version/version}
    - put: oss-metric-store-release-version-patch
      params: {file: new-main-version/version}
    - <<: *send-alert-message

- name: oss-msr-minor-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: oss-metric-store-release-version
    - get: oss-metric-store-release-version-minor
      params: {bump: minor}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: oss-metric-store-release-version-minor
    params:
      LEVEL: minor
      APP: metric-store
  - task: sync-versioning
    file: metric-store-ci/tasks/sync_versions/minor.yml
    input_mapping:
      this-version: oss-metric-store-release-version-minor
      main-version: oss-metric-store-release-version
  on_success:
    do:
    - put: oss-metric-store-release-version
      params: {file: new-main-version/version}
    - put: oss-metric-store-release-version-minor
      params: {file: new-main-version/version}
    - <<: *send-alert-message

- name: oss-msr-major-version
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: metric-store-ci
    - get: oss-metric-store-release-version-major
      params: {bump: major}
  - task: create-message
    file: metric-store-ci/tasks/alert-message-release-start/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      version: oss-metric-store-release-version-major
    params:
      LEVEL: major
      APP: metric-store
  on_success:
    do:
    - put: oss-metric-store-release-version
      params: {file: oss-metric-store-release-version-major/version}
    - put: oss-metric-store-release-version-major
      params: {file: oss-metric-store-release-version-major/version}
    - <<: *send-alert-message

- name: create-oss-msr-final-release
  serial: true
  disable_manual_trigger: true
  plan:
  - get: oss-metric-store-release-version-patch
    trigger: true
    passed: [oss-msr-patch-version]
  - get: oss-metric-store-release-version-minor
    trigger: true
    passed: [oss-msr-minor-version]
  - get: oss-metric-store-release-version-major
    trigger: true
    passed: [oss-msr-major-version]
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: oss-metric-store-release-develop
    - get: oss-metric-store-release-master
    - get: metric-store-ci
    - get: oss-metric-store-release-version
  - task: create-private-release
    file: metric-store-ci/tasks/create-private-release/task.yml
    input_mapping:
      release-master: oss-metric-store-release-master
      release-develop: oss-metric-store-release-develop
      release-version: oss-metric-store-release-version
    params:
      JSON_KEY: ((release-credentials.yml/Notes/gcp-service-account-key))
      GITHUB_PRIVATE_KEY: ((github-key-ci.yml/Notes/ms_github_private_key))
  - put: oss-metric-store-release-tarball
    params:
      file: release-tarball/release.tgz
  - put: oss-metric-store-release-develop
    params:
      repository: release-develop-modified
      rebase: false

- name: publish-oss-msr-github-release
  serial: true
  disable_manual_trigger: true
  plan:
  - aggregate:
    - get: oss-metric-store-release-version
      trigger: true
      passed: [create-oss-msr-final-release]
    - get: oss-metric-store-release-tarball
    - get: metric-store-ci
  - task: github-publish-release-metadata
    file: metric-store-ci/tasks/publish-github-release/task.yml
    input_mapping:
      release-version: oss-metric-store-release-version
      release-tarball: oss-metric-store-release-tarball
    params:
      PROJECT_NAME: Metric Store
  - put: oss-metric-store-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: tag-oss-msr-for-backports
  serial: true
  disable_manual_trigger: true
  plan:
  - aggregate:
    - get: oss-metric-store-release-version
      trigger: true
      passed: [publish-oss-msr-github-release]
    - get: metric-store-ci
    - get: log-cache-deployments
    - get: denver-locks
    - get: cf-deployment-concourse-tasks
  - do:
    - task: snapshot-acceptance-environment
      file: metric-store-ci/tasks/snapshot-acceptance-environment/task.yml
      input_mapping:
        bbl-state: denver-locks
        log-cache-deployments: log-cache-deployments
        release-version: oss-metric-store-release-version
      params:
        BBL_STATE_DIR: ((bbl_state_dir))
    - put: log-cache-deployments
      params:
        repository: log-cache-deployments-modified
        tag: oss-metric-store-release-version/version
        tag_prefix: oss-metric-store-v
  - put: metric-store-ci
    params:
      repository: metric-store-ci
      tag: oss-metric-store-release-version/version
      tag_prefix: oss-metric-store-v
      only_tag: true
  on_success:
    do:
    - task: create-message
      file: metric-store-ci/tasks/alert-message-release-end/task.yml
      input_mapping:
        version: oss-metric-store-release-version
    - <<: *send-alert-message

- name: log-cache-cli-bump-major
  serial: true
  plan:
  - put: log-cache-cli-version
    params: {bump: major}

- name: log-cache-cli-bump-minor
  serial: true
  plan:
  - put: log-cache-cli-version
    params: {bump: minor}

- name: log-cache-cli-create-final-release
  serial: true
  plan:
  - aggregate:
    - get: log-cache-cli
    - get: log-cache-cli-version
  - task: create-binaries
    config:
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      platform: linux
      inputs:
      - name: log-cache-cli
      - name: log-cache-cli-version
      outputs:
      - name: output-repo
      - name: github-release
      - name: version
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            semver="$(cat log-cache-cli-version/version)"
            cp log-cache-cli-version/version version

            # build version to inject into build with ldflags
            IFS="." read -r -a version_parts <<< $semver
            version="{\"Major\":${version_parts[0]},\"Minor\":${version_parts[1]},\"Build\":${version_parts[2]}}"

            # write out github release files
            echo "Log Cache CLI $semver" > github-release/name
            echo "v$semver" > github-release/tag
            echo "TBD" > github-release/body
            cp -R log-cache-cli/. output-repo

            export WORKSPACE="$PWD"

            pushd log-cache-cli
              go mod download
            popd

            mkdir github-release/builds
            pushd "log-cache-cli/cmd/cf-lc-plugin"
              GOOS=linux go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-linux
              GOOS=darwin go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-darwin
              GOOS=windows go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-windows
            popd
            pushd "log-cache-cli/cmd/lc"
              GOOS=linux go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-linux
              GOOS=darwin go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-darwin
              GOOS=windows go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-windows
            popd

  - put: log-cache-cli
    params:
      repository: output-repo
      rebase: false
      tag: github-release/tag
  - put: log-cache-cli-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/builds/*
  - put: log-cache-cli-version
    params:
      file: version/version
